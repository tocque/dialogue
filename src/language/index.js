import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@codemirror/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser$1 = LRParser.deserialize({
  version: 13,
  states: "$OOVQPOOO_QQO'#C_OOQO'#Co'#CoQsQPOOQOQPOOOxOSO'#CeO!QOWO'#CiOOQO'#Cq'#CqO!VQQO'#CbOOQO'#Ca'#CaO!kQQO,58yQYQPOOOOQO,59P,59PO!vOSO,59PO!{OWO,59TOOQO-E6o-E6oO_QQO'#ClOOQO'#Cr'#CrO#QQQO1G.eOOQO1G.k1G.kOOQO1G.o1G.oOOQO,59W,59WOOQO-E6p-E6p",
  stateData: "#e~OPOS~OSPOdQO~OWTO[UO_VOaUPbUPgUP~ObZO~OV[OY]O~O^^O~OWTO[UO_VOaUXbUXgUX~Oa`ObRagRa~OVcO~OZdO~Oa`ObRigRi~O[_SbdPb~",
  goto: "!`gPPPhPknPPtPPPtPPyPP}P!R!YRRORYPQXPRe`VVPW`TaYbTSOZSWP`R_WQbYRfb",
  nodeNames: "⚠ Space Dialog DialogHeader DialogSymbol DefaultParam ParamValues BorderedEnd BorderedStart BorderedParamValue BorderedParamContent ExpressionEnd ExpressionStart ExpressionParamValue EmbeddedExpression ParamValue NamedParam ParamName LineBreaker DialogBody BodyContent",
  maxTerm: 24,
  nodeProps: [
    [NodeProp.openedBy, 7,"BorderedStart",11,"ExpressionStart"],
    [NodeProp.closedBy, 8,"BorderedEnd",12,"ExpressionEnd"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 2,
  tokenData: ",j_R`OX!TXY%iYZ&aZp!Tpq%iqs!Tst&{tu'uu}!T}!O)j!O#n!T#n#o#}#o#p+^#p#q!T#q#r+x#r~!T_!`XYS^W_QdPOX!TXZ!{Zp!Tpq!{q#n!T#n#o#}#o#q!T#q#r${#r~!T]#UTYS^WdPO#n!{#n#o#e#o#q!{#q#r#r#r~!{[#lQYS^WO#q#e#r~#eP#wQdPO#n#r#o~#r^$WVYS^W_QOX#}XZ#eZp#}pq#eq#q#}#q#r$m#r~#}Q$rR_QOX$mZp$mq~$mR%SV_QdPOX${XZ#rZp${pq#rq#n${#n#o$m#o~${_%tXYS^WdPPROX!{XY%iYp!{pq%iq#n!{#n#o#e#o#q!{#q#r#r#r~!{_&lTYS^WbRdPO#n!{#n#o#e#o#q!{#q#r#r#r~!{_'YXYS^W_QSPdPOX!TXZ!{Zp!Tpq!{q#n!T#n#o#}#o#q!T#q#r${#r~!T_(QYYS^W_QdPOX!TXZ!{Zp!Tpq!{q#n!T#n#o#}#o#p(p#p#q!T#q#r${#r~!T_(}XYS^W[Q_QdPOX!TXZ!{Zp!Tpq!{q#n!T#n#o#}#o#q!T#q#r${#r~!T_)sYYS^WdPO!Q!{!Q![*c![!c!{!c!}*c!}#T!{#T#n*c#n#o*}#o#q!{#q#r#r#r~!{_*nTYS^WaQdPO#n!{#n#o#e#o#q!{#q#r#r#r~!{^+WQYS^WaQO#q#e#r~#e_+iTYSWQ^WdPO#n!{#n#o#e#o#q!{#q#r#r#r~!{_,TVVSZW_QdPOX${XZ#rZp${pq#rq#n${#n#o$m#o~${",
  tokenizers: [0, 1, 2, 3],
  topRules: {"Dialog":[0,2]},
  tokenPrec: 105
});

const DialogLanguage = LRLanguage.define({
    parser: parser$1.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            foldNodeProp.add({
                Application: foldInside
            }),
            styleTags({
                DialogSymbol: tags.heading,
                ParamName: tags.variableName,
                BorderedStart: tags.angleBracket,
                BorderedEnd: tags.angleBracket,
                ExpressionStart: tags.keyword,
                ExpressionEnd: tags.keyword,
            })
        ]
    }),
});
function Dialog() {
    return new LanguageSupport(DialogLanguage);
}

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 13,
  states: "$[OVQPOOO[OQO'#C`OaQSO'#C_QuQPOOOOQO,58z,58zOzOWO'#CgO!SO`O'#CkOOQO'#Cs'#CsO!XQSO'#CdOOQO'#Cc'#CcO!mQPO,58yQ!xQpOOOOQO,59R,59RO!}OPO,59RO#SO`O,59VOOQO-E6q-E6qOaQSO'#CnOOQO'#Ct'#CtO#XQPO1G.eOOQO'#Cq'#CqQOQPOOOOQO1G.m1G.mOOQO1G.q1G.qOOQO,59Y,59YOOQO-E6r-E6r",
  stateData: "#k~OPOS~OTPO~OUSO~OYTO^UOaVOcWPdWPiWP~OdZO~OX[O[]O~O`^O~OYTO^UOaVOcWXdWXiWX~Oc`OdRaiRa~OfcO~OXeO~O]fO~Oc`OdRiiRi~O^adfPd~",
  goto: "!diPPPjmPPpsPPyPPPyPP!OPP!SP!V!^RRORQORYQQXQRg`VVQW`TaYbRdZSWQ`R_WQbYRhb",
  nodeNames: "⚠ Space Order OrderHeader OrderMethod MethodSymbol MethodName DefaultParam ParamValues BorderedEnd BorderedStart BorderedParamValue BorderedParamContent ExpressionEnd ExpressionStart ExpressionParamValue EmbeddedExpression ParamValue NamedParam ParamName LineBreaker OrderBody BodyContent",
  maxTerm: 26,
  nodeProps: [
    [NodeProp.openedBy, 9,"BorderedStart",13,"ExpressionStart"],
    [NodeProp.closedBy, 10,"BorderedEnd",14,"ExpressionEnd"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 2,
  tokenData: "0n!aRaOX!WXY%tYZ&lZp!Wpq%tqt!Wtu'Wu}!W}!O)P!O!b!W!b!c.U!c#n!W#n#o$S#o#p/Q#p#q!W#q#r/z#r~!W!`!eX[W``UQaSfpOX!WXZ#QZp!Wpq#Qq#n!W#n#o$S#o#q!W#q#r%U#r~!W!Y#ZT[W``fpO#n#Q#n#o#j#o#q#Q#q#r#w#r~#Qh#qQ[W``O#q#j#r~#jp#|QfpO#n#w#o~#wn$_V[W``UQaSOX$SXZ#jZp$Spq#jq#q$S#q#r$t#r~$SU${RUQaSOX$tZp$tq~$tv%_VUQaSfpOX%UXZ#wZp%Upq#wq#n%U#n#o$t#o~%U!_&PX[W``fpPuOX#QXY%tYp#Qpq%tq#n#Q#n#o#j#o#q#Q#q#r#w#r~#Q!_&wT[W``dTfpO#n#Q#n#o#j#o#q#Q#q#r#w#r~#Q!`'eY[W``UQaSfpOX!WXZ#QZp!Wpq#Qq#n!W#n#o$S#o#p(T#p#q!W#q#r%U#r~!W!`(dX[W``UQ^SaSfpOX!WXZ#QZp!Wpq#Qq#n!W#n#o$S#o#q!W#q#r%U#r~!W!a)[^[W``UQfpOX*WXZ#QZp*Wpq#Qq!Q*W!Q![,j![!c*W!c!},j!}#T*W#T#n,j#n#o-d#o#q*W#q#r+|#r~*W![*cX[W``UQfpOX*WXZ#QZp*Wpq#Qq#n*W#n#o+O#o#q*W#q#r+|#r~*Wj+XV[W``UQOX+OXZ#jZp+Opq#jq#q+O#q#r+n#r~+OQ+sRUQOX+nZp+nq~+nr,TVUQfpOX+|XZ#wZp+|pq#wq#n+|#n#o+n#o~+|!a,wX[W``UQcTfpOX*WXZ#QZp*Wpq#Qq#n*W#n#o+O#o#q*W#q#r+|#r~*Wo-oV[W``UQcTOX+OXZ#jZp+Opq#jq#q+O#q#r+n#r~+O!a.eX[W``UQTPaSfpOX!WXZ#QZp!Wpq#Qq#n!W#n#o$S#o#q!W#q#r%U#r~!W!`/_X[WYS``UQfpOX*WXZ#QZp*Wpq#Qq#n*W#n#o+O#o#q*W#q#r+|#r~*W!a0XVXX]`UQaSfpOX%UXZ#wZp%Upq#wq#n%U#n#o$t#o~%U",
  tokenizers: [0, 1, 2, 3, 4, 5],
  topRules: {"Order":[0,2]},
  tokenPrec: 112
});

const OrderLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            foldNodeProp.add({
                Application: foldInside
            }),
            styleTags({
                MethodSymbol: tags.operatorKeyword,
                MethodName: tags.controlKeyword,
                ParamName: tags.variableName,
                BorderedStart: tags.angleBracket,
                BorderedEnd: tags.angleBracket,
                ExpressionStart: tags.keyword,
                ExpressionEnd: tags.keyword,
            })
        ]
    }),
});
function Order() {
    return new LanguageSupport(OrderLanguage);
}

export { Dialog, Order };
